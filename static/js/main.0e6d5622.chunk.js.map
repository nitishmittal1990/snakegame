{"version":3,"sources":["SnakeItem.js","GameOverChild.js","App.js","serviceWorker.js","index.js"],"names":["SnakeItem","props","class1","snakepresent","food","isSnake","className","id","x","y","GameOverChild","onClick","onClicked","score","App","state","rows","cols","snakegrid","snake","snakehead","gameover","gamestart","inputDisable","resetGame","bind","generateRandomFood","formGrid","snakeMove","handleKeyPress","isEatFood","handleGameStart","gridUpdate","foodrow","Math","floor","random","this","foodcol","updatedsnakegrid","map","eachsnake","isFood","isSnakePresent","setState","createid","i","j","push","snakeface","cursnake","eachgrid","curScore","gamestatus","unshift","pop","length","event","movestate","keyCode","prevState","setInterval","document","addEventListener","window","location","reload","snakegridlist","key","startBtn","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e6d5622.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SnakeItem(props){\n    var class1='';\n    var snakepresent = '';\n    if(props.food) {\n        class1 = 'food'\n    }\n    if (props.isSnake) {\n        snakepresent ='snakepresent'\n    }\n    if (props.isSnake && props.food) {\n        class1 = ''\n    }\n    return(\n        <div className={\"Snakesmallgrid \" + class1 + snakepresent} id={props.id} x={props.x} y={props.y}></div>\n    )\n}\n\nexport default SnakeItem;","import React from 'react';\n\nfunction GameOverChild(props){\n    return(\n        <div id=\"overlay\">Game Over <br/> Thank You For Playing\n            <button onClick={props.onClicked} id=\"playBtn\">Play Again</button>\n            <p>Your Score is {props.score}</p>\n        </div>\n        \n    )\n}\n\nexport default GameOverChild;","import React,{Component} from 'react';\nimport './App.css';\nimport SnakeItem from './SnakeItem';\nimport GameOverChild from './GameOverChild';\n\nclass App extends Component{\n\n  constructor(){\n    super()\n    this.state = {\n      rows: 10,\n      cols: 10,\n      snakegrid: [],\n      snake:[ \n        {x:4,y:4},\n        {x:4,y:3},\n      ],\n      snakehead: 'right',\n      gameover:false,\n      gamestart: false,\n      food:{},\n      inputDisable: false,\n      score: 0\n    }\n    this.resetGame=this.resetGame.bind(this)\n    this.generateRandomFood = this.generateRandomFood.bind(this)\n    this.formGrid = this.formGrid.bind(this)\n    this.snakeMove = this.snakeMove.bind(this)\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n    this.isEatFood = this.isEatFood.bind(this)\n    this.handleGameStart = this.handleGameStart.bind(this)\n    this.formGrid()\n    this.gridUpdate = this.gridUpdate.bind(this)\n  }\n\n  generateRandomFood(){\n    var foodrow = Math.floor(Math.random() * this.state.rows);\n    var foodcol = Math.floor(Math.random() * this.state.cols);\n    \n    var updatedsnakegrid = this.state.snakegrid.map((eachsnake)=>{\n      \n      if(eachsnake.x===foodrow && eachsnake.y===foodcol){\n        return ({\n          id:eachsnake.id,\n          x:foodrow,\n          y:foodcol,\n          isFood:true,\n          isSnakePresent:false\n        })\n      } else {\n        return ({\n          id:eachsnake.id,\n          x:eachsnake.x,\n          y:eachsnake.y,\n          isFood:false,\n          isSnakePresent: eachsnake.isSnakePresent\n        })\n      }\n    })\n    \n    this.setState({\n      snakegrid: updatedsnakegrid,\n      food: {x:foodrow,y:foodcol}\n    })\n    \n  }\n\n  formGrid(){\n    var createid=1;\n    for (var i = 0; i < this.state.rows; i++) {\n      for (var j = 0; j < this.state.cols; j++) {\n        if(i===4 && j===4){\n          this.state.snakegrid.push({\n            id: createid,\n            x:i,\n            y:j,\n            isFood: false,\n            isSnakePresent: true\n          })\n        } else if(i === 4 && j === 3){\n            this.state.snakegrid.push({\n              id: createid,\n              x: i,\n              y: j,\n              isFood: false,\n              isSnakePresent: true\n            })\n        } else {\n          this.state.snakegrid.push({\n            id: createid,\n            x: i,\n            y: j,\n            isFood: false,\n            isSnakePresent: false\n          })\n        }\n        createid++;\n      }\n    }\n\n  }\n  \n  isEatFood(snakeface) {\n    if (snakeface.x === this.state.food.x && snakeface.y === this.state.food.y) {\n      this.generateRandomFood();\n      return true;\n    }\n  }\n\n  /* \n    Function Use: Updating Grid On Snake Move \n  */\n  gridUpdate(cursnake){\n\n    let updatedsnakegrid = this.state.snakegrid;\n    for(let eachgrid in updatedsnakegrid){\n\n      updatedsnakegrid[eachgrid] = {\n        id: updatedsnakegrid[eachgrid].id,\n        x: updatedsnakegrid[eachgrid].x,\n        y: updatedsnakegrid[eachgrid].y,\n        isFood: updatedsnakegrid[eachgrid].isFood,\n        isSnakePresent: false,\n      }\n      for(let eachsnake in cursnake){\n        if (updatedsnakegrid[eachgrid].x === cursnake[eachsnake].x && updatedsnakegrid[eachgrid].y === cursnake[eachsnake].y) {\n          updatedsnakegrid[eachgrid] = {\n            id: updatedsnakegrid[eachgrid].id,\n            x: updatedsnakegrid[eachgrid].x,\n            y: updatedsnakegrid[eachgrid].y,\n            isFood: updatedsnakegrid[eachgrid].isFood,\n            isSnakePresent: true,\n          }\n          break;\n        }\n      }\n    }\n    return updatedsnakegrid;\n  }\n\n  /* \n    Function Use: Snake Move Login with Snake Direction\n  */\n  snakeMove(){\n    var curScore = this.state.score;\n    var updatedsnakegrid;\n    var gamestatus=this.state.gameover;\n    if(this.state.snakehead==='right'){\n      let cursnake = this.state.snake;\n      let snakeface = cursnake[0];\n      snakeface = {x:snakeface.x, y:snakeface.y+1};\n      if (snakeface.y>9){\n        gamestatus = true;\n      }\n      if(this.isEatFood(snakeface)){\n        cursnake.unshift(snakeface);\n        curScore = curScore + 10;\n      } else {\n        cursnake.unshift(snakeface);\n        cursnake.pop();\n      }\n      \n      for (let y=1;y<cursnake.length;y++) {\n        if (snakeface.x === cursnake[y].x && snakeface.y === cursnake[y].y) {\n          gamestatus = true;\n        }\n      }\n\n      updatedsnakegrid = this.gridUpdate(cursnake);\n      \n      \n      \n    } else if(this.state.snakehead==='top') {\n      let cursnake = this.state.snake;\n      let snakeface = cursnake[0];\n      snakeface = {\n        x: snakeface.x-1,\n        y: snakeface.y\n      };\n      if (snakeface.x < 0) {\n        gamestatus = true;\n      }\n      if (this.isEatFood(snakeface)) {\n        cursnake.unshift(snakeface);\n        curScore = curScore + 10;\n      } else {\n        cursnake.unshift(snakeface);\n        cursnake.pop();\n      }\n      for (let y=1;y<cursnake.length;y++) {\n        if (snakeface.x === cursnake[y].x && snakeface.y === cursnake[y].y) {\n          gamestatus = true;\n        }\n      }\n\n      updatedsnakegrid = this.gridUpdate(cursnake);\n\n      \n    } else if(this.state.snakehead==='left') {\n      let cursnake = this.state.snake;\n      let snakeface = cursnake[0];\n      snakeface = {\n        x: snakeface.x,\n        y: snakeface.y-1\n      };\n      if (snakeface.y < 0) {\n        gamestatus = true;\n      }\n      if (this.isEatFood(snakeface)) {\n        cursnake.unshift(snakeface);\n        curScore = curScore + 10;\n      } else {\n        cursnake.unshift(snakeface);\n        cursnake.pop();\n      }\n      for (let y=1;y<cursnake.length;y++) {\n        if (snakeface.x === cursnake[y].x && snakeface.y === cursnake[y].y) {\n          gamestatus = true;\n        }\n      }\n\n\n      updatedsnakegrid = this.gridUpdate(cursnake);\n      \n    } else if(this.state.snakehead==='bottom'){\n      let cursnake = this.state.snake;\n      let snakeface = cursnake[0];\n\n      snakeface = {\n        x: snakeface.x+1,\n        y: snakeface.y,\n      };\n      if (snakeface.x > 9) {\n        gamestatus = true;\n      }\n      if (this.isEatFood(snakeface)) {\n        cursnake.unshift(snakeface);\n        curScore = curScore + 10;\n      } else {\n        cursnake.unshift(snakeface);\n        cursnake.pop();\n      }\n      for (let y=1;y<cursnake.length;y++) {\n        if (snakeface.x === cursnake[y].x && snakeface.y === cursnake[y].y) {\n          gamestatus = true;\n        }\n      }\n\n\n      updatedsnakegrid = this.gridUpdate(cursnake);\n      \n      \n    } else{\n\n    }\n\n    \n    this.setState({\n      snakegrid: updatedsnakegrid,\n      gameover: gamestatus,\n      score: curScore\n    })\n  }\n\n  handleKeyPress(event){\n    var movestate;\n    if (event.keyCode === 37) {\n      movestate='left'; \n    } else if (event.keyCode === 38) {\n      movestate='top'\n    } else if (event.keyCode === 39) {\n      movestate = 'right'\n    } else if (event.keyCode === 40) {\n      movestate='bottom'\n    } else {\n      \n    }\n\n    this.setState(function (prevState){\n      if (prevState.snakehead === 'right' || prevState.snakehead==='left') {\n\n        if (movestate === 'top' || movestate === 'bottom') {\n\n          return {\n            snakehead: movestate\n          }\n        } else {\n          return{\n            snakehead: prevState.snakehead\n          }\n        }\n      } else if (prevState.snakehead === 'top' || prevState.snakehead === 'bottom') {\n        if (movestate === 'left' || movestate==='right') {\n          return {\n            snakehead: movestate\n          }\n        } else {\n          return {\n            snakehead: prevState.snakehead\n          }\n        }\n      }\n    })\n\n  }\n\n  \n  handleGameStart(){\n    this.setState({\n      gamestart: true\n    })\n    setInterval(() => {\n      this.snakeMove();\n    }, 400);\n  }\n\n  componentDidMount(){\n    this.generateRandomFood();\n    if(this.state.gamestart) {\n      \n    }\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  \n  resetGame(){\n    window.location.reload();\n  }\n  \n\n  render(){\n    if(this.state.gamestart){\n      var snakegridlist = this.state.snakegrid.map((eachsnake)=>{\n        return <SnakeItem x={eachsnake.x} y={eachsnake.y} isSnake={eachsnake.isSnakePresent} food={eachsnake.isFood} key={eachsnake.x+'-'+eachsnake.y} id={eachsnake.id} />\n      })\n    } else {\n      var startBtn = <button onClick={this.handleGameStart} id=\"gStart\">Start Game</button>;\n    }\n    \n    \n    return (\n      <div className=\"snakegame\">\n        <h1> Snake World </h1>\n        <p className=\"scoredisplay\">Your Score: {this.state.score} </p>\n        {startBtn}\n        <div className = \"SnakeApp\">\n          {this.state.gameover?(<GameOverChild onClicked={this.resetGame} score={this.state.score} />):null}\n          \n          {snakegridlist}\n        </div>\n      </div>\n    )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}